# Generated by Django 4.2.4 on 2023-08-17 07:11

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('foodgram', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(help_text='Введите имя пользователя', max_length=150, verbose_name='Имя пользователя')),
                ('last_name', models.CharField(help_text='Введите фамилию пользователя', max_length=150, verbose_name='Фамилия пользователя')),
                ('email', models.EmailField(help_text='Введите адрес электронной почты, поле обязательное для заполнения', max_length=254, unique=True, verbose_name='Адрес электронной почты')),
                ('username', models.CharField(help_text='Введите username', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_field', message='Неправильный формат поляПоле может содержать только буквы,цифры и следующие символы: @ . + -', regex='^[\\w.@+-]+$')], verbose_name='Уникальное имя пользователя')),
                ('password', models.CharField(help_text='Введите пароль, это обязательное поле', max_length=150, verbose_name='Пароль пользователя')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserShoppingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateField(auto_now=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_shopping_cart_recipe', to='foodgram.recipe', verbose_name='Рецепт')),
                ('user', models.ForeignKey(help_text='Избранные рецепты', on_delete=django.db.models.deletion.CASCADE, related_name='user_shopping_cart_user', to=settings.AUTH_USER_MODEL, verbose_name='Избранные рецепты')),
            ],
            options={
                'verbose_name': 'Список покупок',
                'verbose_name_plural': 'Список покупок',
                'ordering': ['pub_date'],
            },
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateField(auto_now=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_favorites_recipe', to='foodgram.recipe', verbose_name='Рецепт')),
                ('user', models.ForeignKey(help_text='Избранные рецепты', on_delete=django.db.models.deletion.CASCADE, related_name='user_favorites_user', to=settings.AUTH_USER_MODEL, verbose_name='Избранные рецепты')),
            ],
            options={
                'verbose_name': 'Избранные',
                'verbose_name_plural': 'Избранные',
                'ordering': ['pub_date'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_date', models.DateField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions_following', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('user', models.ForeignKey(help_text='Пользователь', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions_follower', to=settings.AUTH_USER_MODEL, verbose_name='Подписан')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
                'ordering': ['user'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='favorite',
            field=models.ManyToManyField(help_text='Избраннные рецепты автора', related_name='user_favorites', through='users.UserFavorite', to='foodgram.recipe', verbose_name='Избранные рецепты'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='shopping_cart',
            field=models.ManyToManyField(help_text='Список покупок', related_name='user_shopping_cart', through='users.UserShoppingCart', to='foodgram.recipe', verbose_name='Список покупок'),
        ),
        migrations.AddField(
            model_name='user',
            name='subscription',
            field=models.ManyToManyField(help_text='На кого подписан автор', related_name='subscriptions', through='users.Subscription', to=settings.AUTH_USER_MODEL, verbose_name='Подписки автора'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='usershoppingcart',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='unique_user_shopping_cart_recipe'),
        ),
        migrations.AddConstraint(
            model_name='userfavorite',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='unique_user_favorite_recipe'),
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('user', 'author'), name='unique_user_subscription_author'),
        ),
    ]
